import mongoose from "mongoose";
import bcrypt from "bcrypt";
const { Schema } = mongoose;

const userSchema = new Schema({
  fullName: {
    type: String,
    required: true,
  },
  username: {
    type: String,
    required: true,
  },
  password: {
    type: String,
    required: true,
  },
  email: {
    type: String,
    required: true,
    unique: true,
    lowercase: true,
  },
  /** this is replaced by link sent to email
  otp: {
    lastOtp: {
      type: Number,
      required: false,
    },
    issueDate: {
      type: Date,
      required: false,
    },
  },
  */
  additionalInfo: {
    required: true,
    accountCreatedDate: {
      type: Date,
      default: Date.now(),
    },
    isVerified: {
      type: Boolean,
      default: false,
    },
    token: {
      value: {
        type: Number,
        required: true,
      },
      createdAt: {
        type: Date,
        default: new Date("2025-02-20T00:00:00Z"),
        required: true,
      },
      requestCount: {
        type: Number,
        default: 0,
        required: true,
      },
      required: true,
    },
  },
});

//hash and unhash the password
userSchema.pre("save", async function (next) {
  const user = this;

  if (user.isModified("password")) {
    try {
      const salt = await bcrypt.genSalt(10);
      const hashedPassword = await bcrypt.hash(user.password, salt);
      user.password = hashedPassword;
    } catch (error: any) {
      next(error);
    }
  }

  next();
});

userSchema.methods.comparePassword = async function (
  candidatePassword: string,
) {
  const user = this;
  return await bcrypt.compare(candidatePassword, user.password);
};

//everytime token changes, update the createdAt value and request count value
userSchema.pre("save", async function (next) {
  if (this.isModified("additionalInfo.token.value")) {
    this.additionalInfo.token.createdAt = new Date();
    this.additionalInfo.token.requestCount = 0;
  }
  next();
});

const User = mongoose.model("User", userSchema);

export default User;
