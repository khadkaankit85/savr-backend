openapi: 3.0.0
info:
  title: SAVR Backend API
  description: API for the SAVR application backend.
  version: 1.0.0
  contact:
    name: SAVR Team
    email: support@savrapp.com
    url: https://savrapp.com
servers:
  - url: http://localhost:3000
    description: Local development server
paths:
  /:
    get:
      summary: Root endpoint
      description: Returns a hello world message to confirm the server is running.
      responses:
        "200":
          description: A simple hello world message
          content:
            text/plain:
              schema:
                type: string
                example: hello world
  /api-docs:
    get:
      summary: API Documentation
      description: Swagger UI that serves as the interactive API documentation.
      responses:
        "200":
          description: The Swagger UI page
          content:
            text/html:
              schema:
                type: string
                example: Swagger UI page for the API
  /api/products/autocompletion:
    get:
      summary: Get product name suggestions, usefull for searchbar
      description: Returns a list of products matching the query string for autocompletion.
      parameters:
        - name: query
          in: query
          required: true
          description: The partial or full product name to search for.
          schema:
            type: string
            example: "laptop"
        - name: limit
          in: query
          required: false
          description: The number of suggestions to return (default is 10).
          schema:
            type: integer
            example: 5
      responses:
        "200":
          description: A list of matching product suggestions.
          content:
            application/json:
              schema:
                type: object
                properties:
                  suggestions:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                          example: "Laptop Pro 15"
                        id:
                          type: string
                          example: "002"
        "400":
          description: Invalid query parameters
        "500":
          description: Server error

/api/user/register:
  post:
    summary: Register a new user with email and password
    description: Allows a user to register with an email and password. A verification email will be sent to confirm their account.
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              fullName:
                type: string
                description: The full name of the user.
                example: "John Doe"
              username:
                type: string
                description: The desired username for the user.
                example: "john_doe"
              email:
                type: string
                description: The email address of the user.
                example: "john.doe@example.com"
              password:
                type: string
                description: The password of the user.
                example: "password123"
    responses:
      "201":
        description: User successfully registered. A verification email is sent.
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "john_doe"
                fullName:
                  type: string
                  example: "John Doe"
                email:
                  type: string
                  example: "john.doe@example.com"
                isVerified:
                  type: boolean
                  example: false
      "400":
        description: Bad Request. This can occur if the email or username already exists.
        content:
          application/json:
            schema:
              type: object
              properties:
                error:
                  type: string
                  example: "User with this email or username already exists."
      "401":
        description: Unauthorized. Invalid data was sent in the request body (e.g., missing required fields).
        content:
          application/json:
            schema:
              type: object
              properties:
                error:
                  type: array
                  items:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Invalid email format"
                      path:
                        type: string
                        example: "email"
      "500":
        description: Internal Server Error. An error occurred while processing the request or saving to the database.
        content:
          application/json:
            schema:
              type: object
              properties:
                error:
                  type: string
                  example: "Couldn't create the user in the database, please try again."
